# -*- coding: utf-8 -*-
"""
Created on Wed Apr 24 17:42:57 2019

@author: Shuey
"""
#toy2
### a toy model
import numpy as np
import tensorflow as tf
#import sys
#sys.path.pardir
#print(help(np.sum))
### functions
def logi(x):
    return 1/(1 + np.exp(-x))
####
def _numerical_gradient_no_batch(f, x):
    h = 1e-4  # 0.0001
    grad = np.zeros_like(x)
    
    for idx in range(x.size):
        tmp_val = x[idx]
        x[idx] = float(tmp_val) + h
        fxh1 = f(x)  # f(x+h)
        
        x[idx] = tmp_val - h 
        fxh2 = f(x)  # f(x-h)
        grad[idx] = (fxh1 - fxh2) / (2*h)
        
        x[idx] = tmp_val  # 値を元に戻す
def numerical_gradient(f, X):
    if X.ndim == 1:
        return _numerical_gradient_no_batch(f, X)
    else:
        grad = np.zeros_like(X)
        
        for idx, x in enumerate(X):
            grad[idx] = _numerical_gradient_no_batch(f, x)
        
        return grad

def gradient_descent(f, init_x, lr=0.01, step_num=100):
    x = init_x
    x_history = []

    for i in range(step_num):
        x_history.append( x.copy() )
        grad = numerical_gradient(f, x)
        x -= lr * grad
    return x, np.array(x_history)
###data
a = np.array([[1,2,3,4],[1,2,3,5],[2,2,3,4]])##0
b = np.array([[8,6,4,2],[8,6,4,1],[7,6,4,2]])##1
final1 = np.array([[1,0],[1,0],[1,0]])
final2 = np.array([[0,1],[0,1],[0,1]])
print(final1)
weight = np.random.randn(4,2)
weight0 = np.array(weight)
print("weight")
print(weight0)
vec = np.random.randn(3,2)
print("vec")
print(vec)
def loss(w):
    a = np.array([[1,2,3,4],[1,2,3,5],[2,2,3,4]])
    b = np.array([[8,6,4,2],[8,6,4,1],[7,6,4,2]])
    a1 = logi(np.dot(a, w) + vec)
    b1 = logi(np.dot(b, w) + vec)
    c = np.sum(np.exp(-a1)) + np.sum(np.exp(-b1))
    da = np.exp(-a1)/c
    db = np.exp(-b1)/c
    loss1 = (da - final1)**2 + (db - final2)**2
    print("loss1",loss1)
    loss2 = np.sum(np.sum(loss1,axis=1))    
    print("loss2",loss2)
    return loss2
print("loss(weight)")
loss(weight)
#print(help(np.array))
####
def func3(x):
    return np.sum(x,axis=0)
kkk = np.array([[1,2],[3,4]])
print("f3",func3(kkk))
lr = 0.1
step_num = 100
init_y = np.array([-3.0, 4.0, 5.0, 6.0, 7.0]) 
#init_y = weight0
#??y, y_history = gradient_descent(loss, weight0, lr=lr, step_num=step_num)
#print(y)
print("end")
